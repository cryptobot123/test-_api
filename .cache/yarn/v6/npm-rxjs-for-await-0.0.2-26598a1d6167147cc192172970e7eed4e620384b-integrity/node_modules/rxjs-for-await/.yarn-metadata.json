{
  "manifest": {
    "name": "rxjs-for-await",
    "version": "0.0.2",
    "description": "Add async-await for-await loop support to RxJS Observables",
    "main": "./dist/cjs/index.js",
    "module": "./dist/esm/index.js",
    "es2015": "./dist/esm/index.js",
    "types": "./dist/types/src/index.d.ts",
    "scripts": {
      "build": "rm -rf ./dist && yarn tsc -p tsconfig.esm.json && yarn tsc && yarn tsc -p tsconfig.types.json",
      "test": "jest",
      "test:jest": "jest",
      "test:tsc": "jest -c jest.tsc.config.js"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/benlesh/rxjs-for-await.git"
    },
    "keywords": [
      "RxJS",
      "Observable",
      "async-await",
      "AsyncIterable",
      "for-await"
    ],
    "author": {
      "name": "Ben Lesh",
      "email": "ben@benlesh.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/benlesh/rxjs-for-await/issues"
    },
    "homepage": "https://github.com/benlesh/rxjs-for-await#readme",
    "devDependencies": {
      "@babel/core": "^7.8.7",
      "@babel/preset-typescript": "^7.8.3",
      "@types/jest": "^25.1.4",
      "@types/node": "^13.9.1",
      "jest": "^25.1.0",
      "jest-runner-tsc": "^1.6.0",
      "prettier": "^1.19.1",
      "rxjs": "^6.0.0",
      "ts-jest": "^25.2.1",
      "typescript": "^3.8.3"
    },
    "peerDependencies": {
      "rxjs": "^6.0.0"
    },
    "files": [
      "dist/",
      "README.md",
      "LICENSE"
    ],
    "_registry": "npm",
    "_loc": "/home/app/.cache/yarn/v6/npm-rxjs-for-await-0.0.2-26598a1d6167147cc192172970e7eed4e620384b-integrity/node_modules/rxjs-for-await/package.json",
    "readmeFilename": "README.md",
    "readme": "![CI](https://github.com/benlesh/rxjs-for-await/workflows/CI/badge.svg)\n[![npm version](https://badge.fury.io/js/rxjs-for-await.svg)](https://www.npmjs.com/package/rxjs-for-await)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](LICENSE)\n\n# rxjs-for-await\nA library for making RxJS support async-await for-await loops via AsyncIterables\n\n## Four Strategies\n\nThis library exposes 4 different ways to consume an [RxJS](https://rxjs.dev) observable with an async/await `for await..of` loop using `AsyncIterable`. Each of these strategies has pros and cons, so be aware of those as you choose the one that suits your needs.\n\n### eachValueFrom (lossless)\n\n```ts\nasync function example() {\n  const source$ = interval(100);\n\n  for await (const value of eachValueFrom(source$)) {\n    console.log(value);\n  }\n}\n```\n\nThis strategy will yield every single value the observable source emits, one at a time, until the observable completes or errors.\n\n#### Pros\n- All values are yielded\n- You get each value one at a time\n\n#### Cons\n- Creates more memory pressure if the body of the `for await` loop takes longer to come back around than the time between emissions from the observable source. If the observable emits faster than your loop can consume them, this may result in a memory leak.\n\n### bufferedValuesFrom (lossless)\n\n```ts\nasync function example() {\n  const source$ = interval(10);\n\n  for await (const buffer of bufferedValuesFrom(source$)) {\n    console.log(buffer);\n    await wait(1000);\n  }\n}\n```\n\nKeep an internal buffer of values emitted by the observable source, and yield the entire buffer to the `for await` loop. Continue this until the observable source completes or errors.\n\n#### Pros\n- All values are yielded\n- Lower memory pressure than `eachValueFrom`\n- Provides snapshots of what has happened since the last loop\n\n#### Cons\n- May still cause out of memory errors if the body of the `for await` loop is _extremely_ slow.\n- Perhaps less intuitive than `eachValueFrom`.\n\n### latestValueFrom (lossy)\n\n```ts\nasync function example() {\n  const source$ = interval(100);\n\n  for await (const value of latestValueFrom(source$)) {\n    console.log(value);\n  }\n}\n```\n\nThis strategy will immediately yield the most recently arrived value, or the very next one, if the `for await` loop is waiting and one has not arrived yet. Will continue\nto do so until the source observable completes or errors.\n\n#### Pros\n- No chance of memory leaks\n- Quick entry to the loop if a value is already available\n\n#### Cons\n- Will lose values if more than one value arrives while the loop body is being processed.\n\n### nextValueFrom (lossy)\n\n```ts\nasync function example() {\n  const source$ = interval(100);\n\n  for await (const value of nextValueFrom(source$)) {\n    console.log(value);\n  }\n}\n```\n\nWill wait for the very next value to arrive, then yield it. Will continue to do so until the source observable completes or errors.\n\n#### Pros\n- No chance of memory leaks\n\n#### Cons\n- Loop must wait for the next value to arrive, perhaps slowing down the process\n- Will lose values if values arrive while the loop is being processed.\n",
    "licenseText": "MIT License\n\nCopyright (c) 2020 Ben Lesh\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/rxjs-for-await/-/rxjs-for-await-0.0.2.tgz#26598a1d6167147cc192172970e7eed4e620384b",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/rxjs-for-await/-/rxjs-for-await-0.0.2.tgz",
    "hash": "26598a1d6167147cc192172970e7eed4e620384b",
    "integrity": "sha512-IJ8R/ZCFMHOcDIqoABs82jal00VrZx8Xkgfe7TOKoaRPAW5nH/VFlG23bXpeGdrmtqI9UobFPgUKgCuFc7Lncw==",
    "registry": "npm",
    "packageName": "rxjs-for-await",
    "cacheIntegrity": "sha512-IJ8R/ZCFMHOcDIqoABs82jal00VrZx8Xkgfe7TOKoaRPAW5nH/VFlG23bXpeGdrmtqI9UobFPgUKgCuFc7Lncw== sha1-JlmKHWFnFHzBkhcpcOfu1OYgOEs="
  },
  "registry": "npm",
  "hash": "26598a1d6167147cc192172970e7eed4e620384b"
}