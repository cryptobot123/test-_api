{
  "manifest": {
    "name": "node-auth-barong",
    "version": "1.0.0",
    "description": "Express middleware for Barong Authorizer",
    "main": "./lib",
    "scripts": {
      "test": "./node_modules/.bin/mocha",
      "test-with-coverage": "nyc --reporter=text mocha",
      "precommit": "npm test && lint-staged"
    },
    "lint-staged": {
      "**/*.+(js|ts|yml|yaml|json)": [
        "eslint --fix",
        "prettier --write",
        "git add"
      ]
    },
    "husky": {
      "hooks": {
        "pre-commit": "yarn precommit"
      }
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/openware/node-auth-barong.git"
    },
    "keywords": [
      "jwt",
      "verify",
      "authorize",
      "barong"
    ],
    "author": {
      "name": "Openware"
    },
    "license": "ISC",
    "bugs": {
      "url": "https://github.com/openware/node-auth-barong/issues"
    },
    "homepage": "https://github.com/openware/node-auth-barong#readme",
    "dependencies": {
      "express": "^4.17.1",
      "express-unless": "^0.5.0",
      "jsonwebtoken": "^8.5.1"
    },
    "devDependencies": {
      "chai": "^4.2.0",
      "eslint": "^6.1.0",
      "eslint-config-standard": "^13.0.1",
      "eslint-plugin-import": "^2.18.2",
      "eslint-plugin-mocha": "^6.0.0",
      "eslint-plugin-node": "^9.1.0",
      "eslint-plugin-promise": "^4.2.1",
      "eslint-plugin-standard": "^4.0.0",
      "husky": "^3.0.3",
      "lint-staged": "^9.2.1",
      "mocha": "^6.2.0",
      "node-mocks-http": "^1.7.6",
      "nyc": "^14.1.1",
      "prettier": "^1.18.2"
    },
    "_registry": "npm",
    "_loc": "/home/app/.cache/yarn/v6/npm-node-auth-barong-1.0.0-73f0d3fa2a8dd90a7d836f3aae06c88a8865a407-integrity/node_modules/node-auth-barong/package.json",
    "readmeFilename": "README.md",
    "readme": "# node-auth-barong\n\nMiddleware that validates JsonWebTokens returned from barong and sets `req.session`.\n\nThis module lets you validate JWT from HTTP requests using `jsonwebtoken` library in your Node.js\napplications. JWTs are typically used to protect API endpoints.\n\n## Install\n\n    $ npm install node-auth-barong\n\n## Usage\n\nThe JWT authentication middleware authenticates Barong session using a JWT.\nIf the token is valid, `req.session` will be set with the JSON object decoded\nto be used by later middleware for authorization and access control.\n\nExample of `req.session` object:\n\n```\n{ iat: 1565687278,\n  exp: 1565693278,\n  sub: 'session',\n  iss: 'barong',\n  aud: [ 'peatio', 'barong' ],\n  jti: '1111111111',\n  uid: 'ID123123123',\n  email: 'admin@barong.io',\n  role: 'admin',\n  level: 3,\n  state: 'active',\n  referral_id: null }\n```\n\nFor example,\n\n```javascript\nvar barongJwt = require('node-auth-barong');\nconst barongJwtPublicKey = Buffer.from(process.env.BARONG_JWT_PUBLIC_KEY.trim(), 'base64').toString('utf-8')\n\napp.get('/protected',\n  barongJwt({barongJwtPublicKey: barongJwtPublicKey}),\n  function(req, res) {\n    if (!req.user.admin) return res.sendStatus(401);\n    res.sendStatus(200);\n  });\n```\n\nYou can specify audience and/or issuer as well:\n\n```javascript\nbarongJwt({ barongJwtPublicKey: 'decoded public key',\n  audience: 'barong',\n  issuer: 'http://issuer' })\n```\n\nAvailable options for verification:\n\n  * algorithms: List of strings with the names of the allowed algorithms. For instance, [\"HS256\", \"HS384\"].\n  * audience: if you want to check audience (aud), provide a value here. The audience can be checked against a string, a regular expression or a list of strings and/or regular expressions. Eg: \"urn:foo\", /urn:f[o]{2}/, [/urn:f[o]{2}/, \"urn:bar\"]\n  * issuer (optional): string or array of strings of valid values for the iss field.\n  * ignoreExpiration: if true do not validate the expiration of the token.\n  * subject: if you want to check subject (sub), provide a value here\n  * clockTolerance: number of seconds to tolerate when checking the nbf and exp claims, to deal with small clock differences among different servers\n  * maxAge: the maximum allowed age for tokens to still be valid. It is expressed in seconds or a string describing a time span zeit/ms. Eg: 1000, \"2 days\", \"10h\", \"7d\". A numeric value is interpreted as a seconds count. If you use a string be sure you provide the time units (days, hours, etc), otherwise milliseconds unit is used by default (\"120\" is equal to \"120ms\").\n  * clockTimestamp: the time in seconds that should be used as the current time for all necessary comparisons.\n\n> If the JWT has an expiration (`exp`), it will be checked.\n\nIf you are using a base64 URL-encoded secret, pass a `Buffer` with `base64` encoding as the secret instead of a string:\n\n```javascript\nbarongJwt({ barongJwtPublicKey: new Buffer('base64encoded', 'base64') })\n```\n\nInstead of decoding you can also specify the path to public key:\n\n```javascript\nvar publicKey = fs.readFileSync('/path/to/public.pub');\nbarongJwt({ barongJwtPublicKey: publicKey });\n```\n\n## Related Modules\n\n- [jsonwebtoken](https://github.com/auth0/node-jsonwebtoken) â€” JSON Web Token sign and verification\n\n## Tests\n\n    $ npm install\n    $ npm test\n\n## Contributors\nCheck them out [here](https://github.com/auth0/express-jwt/graphs/contributors)\n\n## Issue Reporting\n\nIf you have found a bug or if you have a feature request, please report them at this repository issues section. Please do not report security vulnerabilities on the public GitHub issue tracker.\n\n## Author\n\n[Openware](https://www.openware.com)\n\n## License\n\nThis project is licensed under the MIT license. See the [LICENSE](LICENSE) file for more info.\n",
    "licenseText": "MIT License\n\nCopyright (c) [year] [fullname]\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/node-auth-barong/-/node-auth-barong-1.0.0.tgz#73f0d3fa2a8dd90a7d836f3aae06c88a8865a407",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/node-auth-barong/-/node-auth-barong-1.0.0.tgz",
    "hash": "73f0d3fa2a8dd90a7d836f3aae06c88a8865a407",
    "integrity": "sha512-mObtrxVzeT9nd3a5eIWfJuEGuaJiu3V9PM4vwMpCJu6phn6j8uOzFuJD/51BpSBt01RInHl54tiIFkaV0VbU1w==",
    "registry": "npm",
    "packageName": "node-auth-barong",
    "cacheIntegrity": "sha512-mObtrxVzeT9nd3a5eIWfJuEGuaJiu3V9PM4vwMpCJu6phn6j8uOzFuJD/51BpSBt01RInHl54tiIFkaV0VbU1w== sha1-c/DT+iqN2Qp9g286rgbIiohlpAc="
  },
  "registry": "npm",
  "hash": "73f0d3fa2a8dd90a7d836f3aae06c88a8865a407"
}