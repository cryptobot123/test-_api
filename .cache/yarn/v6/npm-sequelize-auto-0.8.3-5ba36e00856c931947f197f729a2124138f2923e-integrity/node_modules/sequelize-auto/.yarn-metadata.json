{
  "manifest": {
    "name": "sequelize-auto",
    "version": "0.8.3",
    "publishConfig": {
      "tag": "latest"
    },
    "description": "Automatically generate bare sequelize models from your database.",
    "main": "index.js",
    "types": "types",
    "keywords": [
      "mysql",
      "mssql",
      "sqlite",
      "postgres",
      "sequelize",
      "sequelizejs",
      "generator",
      "mapper",
      "typescript"
    ],
    "files": [
      "*.js",
      "lib/**/*.js",
      "types/**/*.ts",
      "*.md"
    ],
    "bin": {
      "sequelize-auto": "bin/sequelize-auto"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/sequelize/sequelize-auto.git"
    },
    "bugs": {
      "url": "https://github.com/sequelize/sequelize-auto/issues"
    },
    "nyc": {
      "exclude": [
        "**/test/*"
      ]
    },
    "scripts": {
      "tsc": "tsc",
      "clean": "rimraf lib && rimraf types && rimraf **/models && rimraf *.tgz",
      "build": "npm run clean && tsc",
      "prepack": "crlf --set=LF bin/sequelize-auto",
      "test": "npm run test-mssql && npm run test-mysql && npm run test-postgres && npm run test-sqlite",
      "test-postgres": "cross-env DEBUG='sequelize-auto:*' DIALECT=postgres nyc mocha",
      "test-postgres-native": "cross-env DEBUG='sequelize-auto:*' DIALECT=postgres-native nyc mocha",
      "test-mysql": "cross-env DEBUG='sequelize-auto:*' DIALECT=mysql nyc mocha",
      "test-sqlite": "cross-env DEBUG='sequelize-auto:*' DIALECT=sqlite nyc mocha",
      "test-mssql": "cross-env DEBUG='sequelize-auto:*' DIALECT=mssql nyc mocha",
      "coveralls": "nyc report --reporter=text-lcov | coveralls"
    },
    "engines": {
      "node": ">= 10"
    },
    "author": {
      "name": "Steve Schmitt",
      "url": "https://github.com/steveschmitt"
    },
    "contributors": [
      {
        "name": "Daniel Durante",
        "email": "me@danieldurante.com"
      },
      {
        "name": "Yuping Zuo",
        "url": "https://github.com/zypA13510"
      }
    ],
    "license": "MIT",
    "dependencies": {
      "lodash": "^4.17.21",
      "mkdirp": "^1.0.4",
      "yargs": "^16.2.0"
    },
    "peerDependencies": {
      "sequelize": ">3.30.0"
    },
    "devDependencies": {
      "@types/chai": "^4.2.17",
      "@types/lodash": "^4.14.168",
      "@types/mocha": "^8.2.2",
      "chai": "^4.3.4",
      "coveralls": "^3.1.0",
      "crlf": "^1.1.1",
      "cross-env": "^7.0.3",
      "debug": "^4.3.1",
      "dotenv": "^8.2.0",
      "eslint": "^7.23.0",
      "lcov-result-merger": "^3.1.0",
      "mocha": "^8.3.2",
      "mysql": "^2.18.1",
      "mysql2": "^2.2.5",
      "nyc": "^15.1.0",
      "pg": "^8.5.1",
      "pg-hstore": "^2.3.3",
      "rimraf": "^3.0.2",
      "sequelize": "^6.6.2",
      "sqlite3": "5.0.2",
      "tedious": "^11.0.6",
      "typescript": "^4.2.3"
    },
    "_registry": "npm",
    "_loc": "/home/app/.cache/yarn/v6/npm-sequelize-auto-0.8.3-5ba36e00856c931947f197f729a2124138f2923e-integrity/node_modules/sequelize-auto/package.json",
    "readmeFilename": "README.md",
    "readme": "# Sequelize-Auto\n\n<!-- [![Greenkeeper badge](https://badges.greenkeeper.io/sequelize/sequelize-auto.svg)](https://greenkeeper.io/) -->\n\n[![Build Status](http://img.shields.io/travis/sequelize/sequelize-auto/master.svg)](https://travis-ci.org/sequelize/sequelize-auto) [![Build status](https://ci.appveyor.com/api/projects/status/bf9lb89rmpj6iveb?svg=true)](https://ci.appveyor.com/project/durango/sequelize-auto) [![Code Climate](https://codeclimate.com/github/sequelize/sequelize-auto/badges/gpa.svg)](https://codeclimate.com/github/sequelize/sequelize-auto) [![Test Coverage](https://codeclimate.com/github/sequelize/sequelize-auto/badges/coverage.svg)](https://codeclimate.com/github/sequelize/sequelize-auto/coverage)\n\nAutomatically generate models for [SequelizeJS](https://github.com/sequelize/sequelize) via the command line.\n\n## Install\n\n    npm install sequelize-auto\n\n## Prerequisites\n\nYou will need to install `sequelize`; it's no longer installed by `sequelize-auto`.\n\nYou will need to install the correct dialect binding before using sequelize-auto.\n\nDialect | Install\n---|---\nMySQL/MariaDB | `npm install sequelize mysql2`\nPostgres | `npm install sequelize pg pg-hstore`\nSqlite | `npm install sequelize sqlite3`\nMSSQL | `npm install sequelize tedious`\n\n\n## Usage\n\n    sequelize-auto -h <host> -d <database> -u <user> -x [password] -p [port]  --dialect [dialect] -c [/path/to/config] -o [/path/to/models] -t [tableName]\n```\nOptions:\n    --help               Show help                                   [boolean]\n    --version            Show version number                         [boolean]\n-h, --host               IP/Hostname for the database.                [string]\n-d, --database           Database name.                               [string]\n-u, --user               Username for database.                       [string]\n-x, --pass               Password for database. If specified without providing\n                          a password, it will be requested interactively from\n                          the terminal.\n-p, --port               Port number for database (not for sqlite). Ex:\n                          MySQL/MariaDB: 3306, Postgres: 5432, MSSQL: 1433\n                                                                      [number]\n-c, --config             Path to JSON file for Sequelize-Auto options and\n                          Sequelize's constructor \"options\" flag object as\n                          defined here:\n                          https://sequelize.org/master/class/lib/sequelize.js~Sequelize.html#instance-constructor-constructor\n                                                                      [string]\n-o, --output             What directory to place the models.          [string]\n-e, --dialect            The dialect/engine that you're using: postgres,\n                          mysql, sqlite, mssql                         [string]\n-a, --additional         Path to JSON file containing model options (for all\n                          tables). See the options: https://sequelize.org/master/class/lib/model.js~Model.html#static-method-init\n                                                                      [string]\n-t, --tables             Space-separated names of tables to import     [array]\n-T, --skipTables         Space-separated names of tables to skip       [array]\n    --caseModel, --cm    Set case of model names: c|l|o|p|u\n                          c = camelCase\n                          l = lower_case\n                          o = original (default)\n                          p = PascalCase\n                          u = UPPER_CASE\n    --caseFile, --cf     Set case of file names: c|l|o|p|u\n    --caseProp, --cp     Set case of property names: c|l|o|p|u\n--noAlias                Avoid creating alias `as` property in relations        \n                                                                     [boolean]\n--noInitModels           Prevent writing the init-models file        [boolean]\n-n, --noWrite            Prevent writing the models to disk          [boolean]\n-s, --schema             Database schema from which to retrieve tables[string]\n-v, --views              Include database views in generated models  [boolean]\n-l, --lang               Language for Model output: es5|es6|esm|ts\n                          es5 = ES5 CJS modules (default)\n                          es6 = ES6 CJS modules\n                          esm = ES6 ESM modules\n                          ts = TypeScript                              [string]\n    --singularize, --sg  Singularize model and file names from plural table\n                          names                                       [boolean]\n```\n\n> On Windows, provide the path to sequelize-auto: `node_modules\\.bin\\sequelize-auto [args]`\n\n## Example\n\n    sequelize-auto -o \"./models\" -d sequelize_auto_test -h localhost -u my_username -p 5432 -x my_password -e postgres\n\nProduces a file/files such as `./models/User.js` which looks like:\n\n```js\nmodule.exports = function(sequelize, DataTypes) {\n  return sequelize.define('User', {\n    id: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      primaryKey: true,\n      autoIncrement: true\n    },\n    username: {\n      type: DataTypes.STRING(20),\n      allowNull: true\n    },\n    aNumber: {\n      type: DataTypes.SMALLINT,\n      allowNull: true\n    },\n    dateAllowNullTrue: {\n      type: DataTypes.DATE,\n      allowNull: true\n    },\n    defaultValueBoolean: {\n      type: DataTypes.BOOLEAN,\n      allowNull: true,\n      defaultValue: true\n    }\n  }, {\n    tableName: 'User',\n  });\n};\n```\n\nSequelize-auto also generates an initialization file, `./models/init-models.js`, which contains the code to load each model definition into Sequelize:\n\n```js\nvar DataTypes = require(\"sequelize\").DataTypes;\nvar _User = require(\"./User\");\nvar _Product = require(\"./Product\");\n\nfunction initModels(sequelize) {\n  var User = _User(sequelize, DataTypes);\n  var Product = _Product(sequelize, DataTypes);\n\n  return {\n    User,\n    Product,\n  };\n}\nmodule.exports = { initModels };\n```\n\nThis makes it easy to import all your models into Sequelize by calling `initModels(sequelize)`.\n\n```js\nvar initModels = require(\"./models/init-models\");\n...\nvar models = initModels(sequelize);\n\nmodels.User.findAll({ where: { username: \"tony\" }}).then(...);\n```\n\nAlternatively, you can [Sequelize.import](http://docs.sequelizejs.com/en/latest/docs/models-definition/#import) each model (for Sequelize versions < 6), or `require` each file and call the returned function:\n\n```js\nvar User = require('path/to/user')(sequelize, DataTypes);\n```\n\n## ES6\n\nYou can use the `-l es6` option to create the model definition files as ES6 classes, or `-l esm` option to create ES6 modules.  Then you would `require` or `import` the classes and call the `init(sequelize, DataTypes)` method on each class.\n\n## TypeScript\n\nAdd `-l ts` to cli options or `lang: 'ts'` to programmatic options.  This will generate a TypeScript class in each model file, and an `init-model.ts` file\nto import and initialize all the classes.\n\n> Note that you need TypeScript **4.x** to compile the generated files.\n\nThe TypeScript model classes are created as described in the [Sequelize manual](https://sequelize.org/master/manual/typescript.html)\n\nExample model class, `order.ts`:\n\n```js\nimport Sequelize, { DataTypes, Model, Optional } from 'sequelize';\nimport type { Customer, CustomerId } from './customer';\nimport type { OrderItem, OrderItemId } from './order_item';\n\nexport interface OrderAttributes {\n  id: number;\n  orderDate: Date;\n  orderNumber?: string;\n  customerId: number;\n  totalAmount?: number;\n  status: 'PROCESSING' | 'SHIPPED' | 'UNKNOWN';\n}\n\nexport type OrderPk = \"id\";\nexport type OrderId = Order[OrderPk];\nexport type OrderCreationAttributes = Optional<OrderAttributes, OrderPk>;\n\nexport class Order extends Model<OrderAttributes, OrderCreationAttributes> implements OrderAttributes {\n  id!: number;\n  orderDate!: Date;\n  orderNumber?: string;\n  customerId!: number;\n  totalAmount?: number;\n  status!: 'PROCESSING' | 'SHIPPED' | 'UNKNOWN';\n\n  // Order belongsTo Customer via customerId\n  customer!: Customer;\n  getCustomer!: Sequelize.BelongsToGetAssociationMixin<Customer>;\n  setCustomer!: Sequelize.BelongsToSetAssociationMixin<Customer, CustomerId>;\n  createCustomer!: Sequelize.BelongsToCreateAssociationMixin<Customer>;\n  // Order hasMany OrderItem via orderId\n  orderItems!: OrderItem[];\n  getOrderItems!: Sequelize.HasManyGetAssociationsMixin<OrderItem>;\n  setOrderItems!: Sequelize.HasManySetAssociationsMixin<OrderItem, OrderItemId>;\n  addOrderItem!: Sequelize.HasManyAddAssociationMixin<OrderItem, OrderItemId>;\n  addOrderItems!: Sequelize.HasManyAddAssociationsMixin<OrderItem, OrderItemId>;\n  createOrderItem!: Sequelize.HasManyCreateAssociationMixin<OrderItem>;\n  removeOrderItem!: Sequelize.HasManyRemoveAssociationMixin<OrderItem, OrderItemId>;\n  removeOrderItems!: Sequelize.HasManyRemoveAssociationsMixin<OrderItem, OrderItemId>;\n  hasOrderItem!: Sequelize.HasManyHasAssociationMixin<OrderItem, OrderItemId>;\n  hasOrderItems!: Sequelize.HasManyHasAssociationsMixin<OrderItem, OrderItemId>;\n  countOrderItems!: Sequelize.HasManyCountAssociationsMixin;\n\n  static initModel(sequelize: Sequelize.Sequelize): typeof Order {\n    Order.init({\n    id: {\n      autoIncrement: true,\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      primaryKey: true\n    },\n    orderDate: {\n      type: DataTypes.DATE,\n      allowNull: false,\n      defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),\n      field: 'OrderDate'\n    },\n    orderNumber: {\n      type: DataTypes.STRING(10),\n      allowNull: true,\n      field: 'OrderNumber'\n    },\n    customerId: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      references: {\n        model: 'customer',\n        key: 'Id'\n      },\n      field: 'CustomerId'\n    },\n    totalAmount: {\n      type: DataTypes.DECIMAL(12,2),\n      allowNull: true,\n      defaultValue: 0.00,\n      field: 'TotalAmount'\n    },\n    status: {\n      type: DataTypes.ENUM('PROCESSING','SHIPPED','UNKNOWN'),\n      allowNull: false,\n      defaultValue: \"UNKNOWN\",\n      field: 'Status'\n    }\n  }, {\n    sequelize,\n    tableName: 'order',\n    timestamps: false,\n  });\n  return Order;\n  }\n}\n```\n\nExample `init-models.ts`:\n\n```js\nimport { Sequelize } from \"sequelize\";\nimport { Customer, CustomerAttributes, CustomerCreationAttributes } from \"./customer\";\nimport { Order, OrderAttributes, OrderCreationAttributes } from \"./order\";\nimport { OrderItem, OrderItemAttributes, OrderItemCreationAttributes } from \"./order_item\";\nimport { Product, ProductAttributes, ProductCreationAttributes } from \"./product\";\nimport { Supplier, SupplierAttributes, SupplierCreationAttributes } from \"./supplier\";\n\nexport {\n  Customer, CustomerAttributes, CustomerCreationAttributes,\n  Order, OrderAttributes, OrderCreationAttributes,\n  OrderItem, OrderItemAttributes, OrderItemCreationAttributes,\n  Product, ProductAttributes, ProductCreationAttributes,\n  Supplier, SupplierAttributes, SupplierCreationAttributes,\n};\n\nexport function initModels(sequelize: Sequelize) {\n  Customer.initModel(sequelize);\n  Order.initModel(sequelize);\n  OrderItem.initModel(sequelize);\n  Product.initModel(sequelize);\n  Supplier.initModel(sequelize);\n\n  Order.belongsTo(Customer, { as: \"customer\", foreignKey: \"customerId\"});\n  Customer.hasMany(Order, { as: \"orders\", foreignKey: \"customerId\"});\n  OrderItem.belongsTo(Order, { as: \"order\", foreignKey: \"orderId\"});\n  Order.hasMany(OrderItem, { as: \"orderItems\", foreignKey: \"orderId\"});\n  OrderItem.belongsTo(Product, { as: \"product\", foreignKey: \"productId\"});\n  Product.hasMany(OrderItem, { as: \"orderItems\", foreignKey: \"productId\"});\n  Product.belongsTo(Supplier, { as: \"supplier\", foreignKey: \"supplierId\"});\n  Supplier.hasMany(Product, { as: \"products\", foreignKey: \"supplierId\"});\n\n  return {\n    Customer: Customer,\n    OrderItem: OrderItem,\n    Order: Order,\n    Product: Product,\n    Supplier: Supplier,\n  };\n}\n```\n\nModel usage in a TypeScript program:\n\n```js\n// Order is the sequelize Model class\n// OrderAttributes is the interface defining the fields\n// OrderCreationAttributes is the interface defining the fields when creating a new record\nimport { initModels, Order, OrderCreationAttributes } from \"./models/init-models\";\n\n// import models into sequelize instance\ninitModels(this.sequelize);\n\nconst myOrders = await Order.findAll({ where: { \"customerId\": cust.id }, include: ['customer'] });\n\nconst attr: OrderCreationAttributes = {\n  customerId: cust.id,\n  orderDate: new Date(),\n  orderNumber: \"ORD123\",\n  totalAmount: 223.45\n};\nconst newOrder = await Order.create(attr);\n```\n\n\n## Configuration options\n\nFor the `-c, --config` option, various JSON/configuration parameters are defined by Sequelize's `options` flag within the constructor. See the [Sequelize docs](https://sequelize.org/master/class/lib/sequelize.js~Sequelize.html#instance-constructor-constructor) for more info.\n\n## Programmatic API\n\n```js\nconst SequelizeAuto = require('sequelize-auto');\nconst auto = new SequelizeAuto('database', 'user', 'pass');\n\nauto.run().then(data => {\n  console.log(data.tables);      // table and field list\n  console.log(data.foreignKeys); // table foreign key list\n  console.log(data.indexes);     // table indexes\n  console.log(data.hasTriggerTables); // tables that have triggers\n  console.log(data.relations);   // relationships between models\n  console.log(data.text)         // text of generated models\n});\n```\n\nWith options:\n\n```js\nconst auto = new SequelizeAuto('database', 'user', 'pass', {\n    host: 'localhost',\n    dialect: 'mysql'|'mariadb'|'sqlite'|'postgres'|'mssql',\n    directory: './models', // where to write files\n    port: 'port',\n    caseModel: 'c', // convert snake_case column names to camelCase field names: user_id -> userId\n    caseFile: 'c', // file names created for each model use camelCase.js not snake_case.js\n    singularize: true, // convert plural table names to singular model names\n    additional: {\n        timestamps: false\n        // ...options added to each model\n    },\n    tables: ['table1', 'table2', 'myschema.table3'] // use all tables, if omitted\n    //...\n})\n```\n\nOr you can create the `sequelize` instance first, using a [connection string](https://sequelize.org/master/manual/getting-started.html#connecting-to-a-database),\nand then pass it to SequelizeAuto:\n```js\nconst SequelizeAuto = require('sequelize-auto');\nconst Sequelize = require('sequelize');\n\n// const sequelize = new Sequelize('sqlite::memory:');\nconst sequelize = new Sequelize('postgres://user:pass@example.com:5432/dbname');\nconst options = { caseFile: 'l', caseModel: 'p', caseProp: 'c' };\n\nconst auto = new SequelizeAuto(sequelize, null, null, options);\nauto.run();\n```\n\n## Resources\n\n - [Changelog](https://github.com/sequelize/sequelize-auto/blob/master/CHANGELOG.md)\n\n## Testing\n\nTo set up:\n\n1. Create an empty database called `sequelize_auto_test` on your database server (sqlite excepted)\n2. Create a `.env` file from `sample.env` and set your username/password/port etc.  The env is read by `test/config.js`\n3. Build the TypeScript from the `src` directory into the `lib` directory:\n\n    `npm run build`\n\nThen run one of the test commands below:\n\n    # mysql only\n    npm run test-mysql\n\n    # postgres only\n    npm run test-postgres\n\n    # mssql  only\n    npm run test-mssql\n\n    # sqlite only\n    npm run test-sqlite\n\nAlso see the [sample](https://github.com/sequelize/sequelize-auto/tree/master/sample) directory which has an example including database scripts, export script, and a sample app.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/sequelize-auto/-/sequelize-auto-0.8.3.tgz#5ba36e00856c931947f197f729a2124138f2923e",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/sequelize-auto/-/sequelize-auto-0.8.3.tgz",
    "hash": "5ba36e00856c931947f197f729a2124138f2923e",
    "integrity": "sha512-6bYV7MWYJxc5mpNsGpcvGkhMa9nLWerYDDfdXcpJnFnz8L0zH97HpiU5vRIB2gb5aUg2y8A6HKHgMfz9fUctHA==",
    "registry": "npm",
    "packageName": "sequelize-auto",
    "cacheIntegrity": "sha512-6bYV7MWYJxc5mpNsGpcvGkhMa9nLWerYDDfdXcpJnFnz8L0zH97HpiU5vRIB2gb5aUg2y8A6HKHgMfz9fUctHA== sha1-W6NuAIVskxlH8Zf3KaISQTjykj4="
  },
  "registry": "npm",
  "hash": "5ba36e00856c931947f197f729a2124138f2923e"
}