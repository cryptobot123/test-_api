{
  "manifest": {
    "name": "wkx",
    "version": "0.5.0",
    "description": "A WKT/WKB/EWKT/EWKB/TWKB/GeoJSON parser and serializer",
    "main": "lib/wkx.js",
    "types": "lib/wkx.d.ts",
    "files": [
      "dist/",
      "lib/"
    ],
    "scripts": {
      "test": "jshint . && nyc mocha",
      "build": "mkdirp ./dist && browserify -r buffer -r ./lib/wkx.js:wkx ./lib/wkx.js > ./dist/wkx.js && uglifyjs -c -m -- ./dist/wkx.js > ./dist/wkx.min.js",
      "coverage": "nyc report --reporter=text-lcov | coveralls"
    },
    "author": {
      "name": "Christian Schwarz"
    },
    "license": "MIT",
    "devDependencies": {
      "async": "^3.2.0",
      "browserify": "^16.5.0",
      "coveralls": "^3.0.11",
      "deep-eql": "^4.0.0",
      "jshint": "^2.11.0",
      "json-stringify-pretty-compact": "^2.0.0",
      "mkdirp": "^1.0.3",
      "mocha": "^7.1.1",
      "nyc": "^15.0.0",
      "pg": "^7.18.2",
      "uglify-js": "^3.8.0"
    },
    "repository": {
      "type": "git",
      "url": "http://github.com/cschwarz/wkx.git"
    },
    "keywords": [
      "wkt",
      "wkb",
      "ewkt",
      "ewkb",
      "twkb",
      "geojson",
      "ogc",
      "geometry",
      "geography",
      "spatial"
    ],
    "dependencies": {
      "@types/node": "*"
    },
    "_registry": "npm",
    "_loc": "/home/app/.cache/yarn/v6/npm-wkx-0.5.0-c6c37019acf40e517cc6b94657a25a3d4aa33e8c-integrity/node_modules/wkx/package.json",
    "readmeFilename": "README.md",
    "readme": "wkx [![Build Status](https://travis-ci.org/cschwarz/wkx.svg?branch=master)](https://travis-ci.org/cschwarz/wkx) [![Coverage Status](https://coveralls.io/repos/cschwarz/wkx/badge.svg?branch=master)](https://coveralls.io/r/cschwarz/wkx?branch=master)\n========\n\nA WKT/WKB/EWKT/EWKB/TWKB/GeoJSON parser and serializer with support for\n\n- Point\n- LineString\n- Polygon\n- MultiPoint\n- MultiLineString\n- MultiPolygon\n- GeometryCollection\n\nExamples\n--------\n\nThe following examples show you how to work with wkx.\n\n```javascript\nvar wkx = require('wkx');\n\n//Parsing a WKT string\nvar geometry = wkx.Geometry.parse('POINT(1 2)');\n\n//Parsing an EWKT string\nvar geometry = wkx.Geometry.parse('SRID=4326;POINT(1 2)');\n\n//Parsing a node Buffer containing a WKB object\nvar geometry = wkx.Geometry.parse(wkbBuffer);\n\n//Parsing a node Buffer containing an EWKB object\nvar geometry = wkx.Geometry.parse(ewkbBuffer);\n\n//Parsing a node Buffer containing a TWKB object\nvar geometry = wkx.Geometry.parseTwkb(twkbBuffer);\n\n//Parsing a GeoJSON object\nvar geometry = wkx.Geometry.parseGeoJSON({ type: 'Point', coordinates: [1, 2] });\n\n//Serializing a Point geometry to WKT\nvar wktString = new wkx.Point(1, 2).toWkt();\n\n//Serializing a Point geometry to WKB\nvar wkbBuffer = new wkx.Point(1, 2).toWkb();\n\n//Serializing a Point geometry to EWKT\nvar ewktString = new wkx.Point(1, 2, undefined, undefined, 4326).toEwkt();\n\n//Serializing a Point geometry to EWKB\nvar ewkbBuffer = new wkx.Point(1, 2, undefined, undefined, 4326).toEwkb();\n\n//Serializing a Point geometry to TWKB\nvar twkbBuffer = new wkx.Point(1, 2).toTwkb();\n\n//Serializing a Point geometry to GeoJSON\nvar geoJSONObject = new wkx.Point(1, 2).toGeoJSON();\n```\n\nBrowser\n-------\n\nTo use `wkx` in a webpage, simply copy a built browser version from `dist/` into your project, and use a `script` tag\nto include it:\n```html\n<script src=\"wkx.js\"></script>\n```\n\nIf you use [browserify][] for your project, you can simply `npm install wkx --save`, and just require `wkx` as usual in\nyour code.\n\n----\n\nRegardless of which of the preceeding options you choose, using `wkx` in the browser will look the same:\n```javascript\nvar wkx = require('wkx');\n\nvar geometry = wkx.Geometry.parse('POINT(1 2)');\n\nconsole.log(geometry.toGeoJSON());\n```\n\nIn addition to the `wkx` module, the browser versions also export `buffer`, which is useful for parsing WKB:\n```javascript\nvar Buffer = require('buffer').Buffer;\nvar wkx = require('wkx');\n\nvar wkbBuffer = new Buffer('0101000000000000000000f03f0000000000000040', 'hex');\nvar geometry = wkx.Geometry.parse(wkbBuffer);\n\nconsole.log(geometry.toGeoJSON());\n```\n[browserify]: http://browserify.org/\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2013 Christian Schwarz\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/wkx/-/wkx-0.5.0.tgz#c6c37019acf40e517cc6b94657a25a3d4aa33e8c",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/wkx/-/wkx-0.5.0.tgz",
    "hash": "c6c37019acf40e517cc6b94657a25a3d4aa33e8c",
    "integrity": "sha512-Xng/d4Ichh8uN4l0FToV/258EjMGU9MGcA0HV2d9B/ZpZB3lqQm7nkOdZdm5GhKtLLhAE7PiVQwN4eN+2YJJUg==",
    "registry": "npm",
    "packageName": "wkx",
    "cacheIntegrity": "sha512-Xng/d4Ichh8uN4l0FToV/258EjMGU9MGcA0HV2d9B/ZpZB3lqQm7nkOdZdm5GhKtLLhAE7PiVQwN4eN+2YJJUg== sha1-xsNwGaz0DlF8xrlGV6JaPUqjPow="
  },
  "registry": "npm",
  "hash": "c6c37019acf40e517cc6b94657a25a3d4aa33e8c"
}